{"version":3,"sources":["routes_example/users_index/views.cljs"],"mappings":";AAMA,+CAAA,/CAAMA;AAAN,AACE,YAAA,AAAAC,RAAMC,wBAAO,sDAAA,mFAAA,zIAACC;AAAd,AAAA,0FAAA,mDAAA,mFAAA,kDAAA,oBAGG,AAACC,4CAAI,WAAKC;AAAL,AAAA,0FAAA,mDAAA,2CAAA,0IAAA,6DAAA,nJAAuB,AAAA,gFAAKA;AAA5B,AAC6B,8BAAA,mFAAA,sGAAA,mFAAA,8DAAA,jWAACC,mZAAqD,AAAA,gFAAKD;WAAU,AAAA,mFAAOA;GAAQH;;AAE3H,AAAAK,yEAAA,6EAAA;AAAA,AAAA,0FAAgDP","names":["routes-example.users-index.views/users-index","cljs.core/deref","users","re_frame.core.subscribe","cljs.core.map","user","re-frame.core/dispatch","routes-example.routes/panels"],"sourcesContent":["(ns routes-example.users-index.views\n  (:require [re-frame.core :as re-frame]\n            [routes-example.users-index.subs :as subs]\n            [routes-example.routes :as routes]\n            [routes-example.events :as events]))\n\n(defn users-index []\n  (let [users @(re-frame/subscribe [::subs/users])]\n    [:div\n     [:h1 \"User List\"]\n     (map (fn [user] [:div {:key (:id user)\n                            :on-click #(re-frame/dispatch [::events/navigate [:user-view :id (:id user)]])} (:name user)]) users)]))\n\n(defmethod routes/panels :users-index-panel [] [users-index])"]}