{"version":3,"sources":["articles/articles_form/events.cljs"],"mappings":";AAMA,yDAAA,zDAACA,6LAEA,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;iBAAT,AAAAF,4CAAAD,WAAA,IAAA,xEAAWI;AAAX,AACE,IAAMC,UAAQ,AAACC,gBAAM,+CAAA,WAAAC,1DAACC;AAAD,AAAS,OAACC,6CAAE,cAAA,bAAKL,kBAAY,AAAA,gFAAAG;GAAS,+CAAA,6DAAA,5GAACG,4CAAIR;AAAhE,mGACMA,9CACA,iDAAA,jDAACS,kHAAkB,cAAA,bAAKP,xKACxB,2LAAA,pLAACO,0OAAYN;;AAGtB,yDAAA,zDAACP,gMAEA,WAAKI,GAAGC;AAAR,qGACMD,/CACA,kDAAA,lDAACU,tDACD,+JAAA,xJAACA;;AAGR,yCAAA,zCAAMC;AAAN,AACE,kBAAA,oFAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,pKAAMC;IACAC,OAAK,KAAKC;IACVC,MAAQF,AAAK;IACbG,QAAM,iBAAAC,WAAIJ,AAAK;AAAT,AAAA,8FAAAI,kCAAAA,xHAAqBL,4CAAAA,sDAAAA;;IAC3BM,OAASL,AAAK;AAJpB,AAKE,yDAAA,uDAAA,5DAAKE,qDAAQC,uDAAUE;;AAG3B,yDAAA,zDAACtB,+LAEA,WAAKI,GAAGC;AAAR,AACE,IAAMkB,UAAQ,kDAAA,mFAAA,sDAAA,4DAAA,vPAACC,+CAAOpB;IAChBqB,eAAa,kDAAA,mFAAA,sDAAA,6DAAA,xPAACD,+CAAOpB;AAD3B,AAEE,IAAAsB,WAAQtB;IAARsB,eAAA,iUAAAA,/SACEH,SAAQ,mBAAAG,SAAA,mFAAA,sDAAA,rKAACC,kOAAuB,AAACC,6CAAKH,aAAaF;AADrD,AAAA,AAEW,6DAAAG,aAAA,mFAAA,sDAAA,8GAAA,1TAACZ;;;AAEjB,yDAAA,zDAACd,mMAEA,cAAA6B,HAAKzB;AAAL,AAAA,IAAA0B,aAAAD;QAAA,AAAA1B,4CAAA2B,WAAA,IAAA,/DAASzB;UAAT,AAAAF,4CAAA2B,WAAA,IAAA,jEAAWC;AAAX,AACE,IAAMN,eAAa,kDAAA,mFAAA,sDAAA,6DAAA,xPAACD,+CAAOpB;AAA3B,AACE,6BAAA,mFAAA,sDAAA,/JAACuB,mBAASvB,yMAAiB,AAAC4B,6CAAKP,aAAaM;;AAEnD,yDAAA,zDAACE,uLAEA,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAxB,4CAAAwB,eAAA,hEAAahC;IAAbkC,aAAAH;QAAA,AAAAhC,4CAAAmC,WAAA,IAAA,/DAAmBjC;iBAAnB,AAAAF,4CAAAmC,WAAA,IAAA,xEAAqBC;AAArB,AACE,IAAMC,YAAU,AAAA,oFAAOpC;IACjBG,UAAQ,kBAAIgC,YAAW,wDAAA,xDAAC1B,8CAAO2B,8EAAwB,AAACzB,0CAAWyB;IACnEC,MAAI,8BAAA,mBAAA,/BAAIF;AAFd,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,oDAAA,uDAAA,2DAAA,OAAA,gEAAA,0FAAA,iOAAA,iEAAA,mFAAA,wIAAA,gEAAA,mFAAA,h3BAIiCE,8HAEAlC,kEACA,AAACmC,2GACD,+BAAA,2CAAA,8DAAA,xIAACC;;AAIrC,yDAAA,zDAAC3C,yLAEA,cAAA4C,HAAKxC;AAAL,AAAA,IAAAyC,aAAAD;QAAA,AAAAzC,4CAAA0C,WAAA,IAAA,/DAASxC;aAAT,AAAAF,4CAAA0C,WAAA,IAAA,pEAAWC;AAAX,AACE,wDAAA,jDAACjC,8CAAMT,sFAAwB0C","names":["re_frame.core.reg_event_db","p__35592","vec__35593","cljs.core.nth","db","_","article-id","article","cljs.core/first","p1__35591#","cljs.core.filter","cljs.core._EQ_","cljs.core.get","cljs.core.assoc","cljs.core.dissoc","articles.articles-form.events/get-date","month-names","date","js/Date","day","month","G__35596","year","new-tag","cljs.core.get_in","current-tags","G__35597","cljs.core/assoc-in","cljs.core.conj","p__35598","vec__35599","tag","cljs.core.disj","re_frame.core.reg_event_fx","p__35602","p__35603","map__35604","cljs.core/--destructure-map","vec__35605","editing-id","form-data","uri","ajax.core/json-request-format","ajax.core/json-response-format","p__35608","vec__35609","result"],"sourcesContent":["(ns articles.articles-form.events\n  (:require [re-frame.core :as re-frame]\n            [ajax.core :as ajax]\n            [day8.re-frame.http-fx]))\n\n\n(re-frame/reg-event-db\n ::initialise-edit\n (fn [db [_ article-id]]\n   (let [article (first (filter #(= (int article-id) (:id %)) (get db :articles [])))]\n     (-> db\n         (assoc :editing-id (int article-id))\n         (assoc :form article)))))\n\n\n(re-frame/reg-event-db\n ::initialise-create\n (fn [db _]\n   (-> db\n       (dissoc  :form)\n       (dissoc :editing-id))))\n\n\n(defn get-date []\n  (let [month-names [\"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dev\"]\n        date (new js/Date)\n        day (-> date (.getDate))\n        month (-> date (.getMonth) month-names)\n        year (-> date (.getFullYear))]\n    (str day \" \" month \" \" year)))\n\n\n(re-frame/reg-event-db\n ::save-article-tag\n (fn [db _]\n   (let [new-tag (get-in db [:form :tag] nil)\n         current-tags (get-in db [:form :tags] #{})]\n     (cond-> db\n       new-tag (assoc-in [:form :tags] (conj current-tags new-tag))\n       :default (dissoc [:form :tag] \"\")))))\n\n(re-frame/reg-event-db\n ::remove-article-tag\n (fn [db [_ tag]]\n   (let [current-tags (get-in db [:form :tags] #{})]\n     (assoc-in db [:form :tags] (disj current-tags tag)))))\n\n(re-frame/reg-event-fx\n ::save-article\n (fn [{:keys [db]} [_ editing-id]]\n   (let [form-data (:form db)\n         article (if editing-id (assoc  form-data :date-created (get-date)) form-data)\n         uri (if editing-id \"/articles/update\" \"/articles/create\")]\n     {:http-xhrio {:method          :POST\n                   :uri             uri\n                   :timeout         8000\n                   :params          article\n                   :format          (ajax/json-request-format)\n                   :response-format (ajax/json-response-format {:keywords? true})  ;; IMPORTANT!: You must provide this.\n                   :on-success      [::saved-article]\n                   :on-failure      [:api-fail]}})))\n\n(re-frame/reg-event-db\n ::saves-article\n (fn [db [_ result]]\n   (assoc db :success-http-result result)))"]}