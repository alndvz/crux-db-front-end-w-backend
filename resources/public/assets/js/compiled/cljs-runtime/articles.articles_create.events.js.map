{"version":3,"sources":["articles/articles_create/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","p__36332","vec__36333","cljs.core.nth","db","_","article-id","article","cljs.core/first","p1__36331#","cljs.core.filter","cljs.core._EQ_","cljs.core.get","cljs.core.assoc","cljs.core.dissoc","articles.articles-create.events/get-date","month-names","date","js/Date","day","month","G__36336","year","new-tag","cljs.core.get_in","current-tags","G__36337","cljs.core/assoc-in","cljs.core.conj","p__36338","vec__36339","tag","cljs.core.disj","articles.articles-create.events/save-new-article","last-article-id","cljs.core.apply","cljs.core/max-key","current-articles","articles.articles-create.events/update-article","id","article-ids","p1__36342#","cljs.core.map","article-index","updated-articles","p__36343","vec__36344","editing-id","updated-db"],"sourcesContent":["(ns articles.articles-create.events\n  (:require [re-frame.core :as re-frame]))\n\n\n(re-frame/reg-event-db\n ::initialise-edit\n (fn [db [_ article-id]]\n   (let [article (first (filter #(= (int article-id) (:id %)) (get db :articles [])))]\n     (-> db\n         (assoc :editing-id (int article-id))\n         (assoc :form article)))))\n\n\n(re-frame/reg-event-db\n ::initialise-create\n (fn [db _]\n   (dissoc db :form)))\n\n\n(defn get-date []\n  (let [month-names [\"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dev\"]\n        date (new js/Date)\n        day (-> date (.getDate))\n        month (-> date (.getMonth) month-names)\n        year (-> date (.getFullYear))]\n    (str day \" \" month \" \" year)))\n\n(re-frame/reg-event-db\n ::save-article-tag\n (fn [db _]\n   (let [new-tag (get-in db [:form :tag] nil)\n         current-tags (get-in db [:form :tags] #{})]\n     (cond-> db\n       new-tag (assoc-in [:form :tags] (conj current-tags new-tag))\n       :default (dissoc [:form :tag] \"\")))))\n\n(re-frame/reg-event-db\n ::remove-article-tag\n (fn [db [_ tag]]\n   (let [current-tags (get-in db [:form :tags] #{})]\n     (assoc-in db [:form :tags] (disj current-tags tag)))))\n\n\n\n(defn save-new-article [db]\n  (let [last-article-id (get (apply max-key :id (:articles db)) :id 0)\n        article (-> (:form db)\n                    (assoc :date-created (get-date))\n                    (assoc :id (inc last-article-id)))\n        current-articles (get db :articles [])]\n    (-> db\n        (assoc :articles (conj current-articles article))\n        (dissoc :form))))\n\n(defn update-article [db id]\n  (let [article (:form db)\n        article-ids (map #(:id %) (:articles db))\n        article-index (.indexOf article-ids id)\n        updated-articles (assoc (:articles db) article-index article)]\n    (assoc db :articles updated-articles)))\n\n\n\n(re-frame/reg-event-db\n ::save-article\n (fn [db [_ editing-id]]\n   (let [updated-db (if editing-id (update-article db editing-id) (save-new-article db))]\n     updated-db)))"]}